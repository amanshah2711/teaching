{"ast":null,"code":"/**\n * Copyright (c) 2019, Chris Oakman\n * Copyright (c) 2019, Justin Fagnani\n * Released under the MIT license\n * https://github.com/justinfagnani/chessboard-element/blob/master/LICENSE.md\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { customElement, property, LitElement, html, query } from 'lit-element';\nimport { render, directive, removeNodes } from 'lit-html';\nimport { styleMap } from 'lit-html/directives/style-map.js';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\nimport { nothing } from 'lit-html';\nimport { deepCopy, interpolateTemplate, isString, isFunction } from './utils.js';\nimport { styles } from './chessboard-styles.js';\nimport { objToFen, findClosestPiece, calculatePositionFromMoves, validMove, validSquare, validPositionObject, COLUMNS, normalizePozition, getSquareColor, blackPieces, whitePieces } from './chess-utils.js';\nimport { renderPiece as renderWikipediaSVGPiece } from './wikipedia-pieces-svg.js'; // ---------------------------------------------------------------------------\n// Constants\n// ---------------------------------------------------------------------------\n// default animation speeds\n\nconst DEFAULT_APPEAR_SPEED = 200;\nconst DEFAULT_MOVE_SPEED = 200;\nconst DEFAULT_SNAPBACK_SPEED = 60;\nconst DEFAULT_SNAP_SPEED = 30;\nconst DEFAULT_TRASH_SPEED = 100; // ---------------------------------------------------------------------------\n// Predicates\n// ---------------------------------------------------------------------------\n\nfunction assertIsDragging(dragState) {\n  var _a;\n\n  if (((_a = dragState) === null || _a === void 0 ? void 0 : _a.state) !== 'dragging') {\n    throw new Error(`unexpected drag state ${JSON.stringify(dragState)}`);\n  }\n}\n\nconst speedToMS = speed => {\n  if (typeof speed === 'number') {\n    return speed;\n  }\n\n  if (speed === 'fast') {\n    return 200;\n  }\n\n  if (speed === 'slow') {\n    return 600;\n  }\n\n  return parseInt(speed, 10);\n};\n\nconst squareId = square => `square-${square}`;\n\nconst sparePieceId = piece => `spare-piece-${piece}`;\n\nconst renderPieceDirective = directive((piece, renderPiece) => part => {\n  if (isFunction(renderPiece)) {\n    renderPiece(piece, part.committer.element);\n  } else {\n    removeNodes(part.committer.element, part.committer.element.firstChild);\n  }\n});\n/**\n * A custom element that renders an interactive chess board.\n *\n * @fires mouseover-square - Fired when the cursor is over a square\n *     The event's `detail` object has the following properties:\n *       * `square`: the square that was entered\n *       * `piece`: the piece on that square (or `false` if there is no piece)\n *       * `position`: the current position\n *       * `orientation`: the current orientation.\n *\n *     Note that `mouseover-square` will *not* fire during piece drag and drop.\n *     Use `drag-move` instead.\n *\n * @fires mouseout-square - Fired when the cursor exits a square\n *     The event's `detail` object has the following properties:\n *       `square`: the square that was left\n *       `piece`: the piece on that square (or `false` if there is no piece)\n *       `position`: the current position\n *       `orientation`: the current orientation.\n *\n *     Note that `mouseout-square` will *not* fire during piece drag and drop.\n *     Use `drag-move` instead.\n *\n * @fires snapback-end - Fired when the snapback animation is complete when\n *     pieces are dropped off the board.\n *     The event's `detail` object has the following properties:\n *       * `piece`: the dragged piece\n *       * `square`: the square the piece returned to\n *       * `position`: the current position\n *       * `orientation`: the current orientation.\n *\n * @fires snap-end - Fired when a piece completes a snap animation\n *     The event's `detail` object has the following properties:\n *       * `source`: the source of the dragged piece\n *       * `square`: the target of the dragged piece\n *       * `piece`: the dragged piece\n *\n * @fires drag-start - Fired when a piece is picked up\n *     The event's `detail` object has the following properties:\n *       * `source`: the source of the piece\n *       * `piece`: the piece\n *       * `position`: the current position on the board\n *       * `orientation`: the current orientation.\n *\n *     The drag action is prevented if the listener calls `event.preventDefault()`.\n *\n * @fires drag-move - Fired when a user-initiated drag moves\n *     The event's `detail` object has the following properties:\n *       * `newLocation`: the new location of the piece\n *       * `oldLocation`: the old location of the piece\n *       * `source`: the source of the dragged piece\n *       * `piece`: the piece\n *       * `position`: the current position on the board\n *       * `orientation`: the current orientation.\n *\n * @fires drop - Fired when a user-initiated drag ends\n *     The event's `detail` object has the following properties:\n *       * `source`: the source of the dragged piece\n *       * `target`: the target of the dragged piece\n *       * `piece`: the piece\n *       * `newPosition`: the new position once the piece drops\n *       * `oldPosition`: the old position before the piece was picked up\n *       * `orientation`: the current orientation.\n *       * `setAction(action)`: a function to call to change the default action.\n *         If `'snapback'` is passed to `setAction`, the piece will return to it's source square.\n *         If `'trash'` is passed to `setAction`, the piece will be removed.\n *\n * @fires move-end - Fired when a piece move completes\n *    The event's `detail` object has the following properties:\n *      * `oldPosition`: the old position\n *      * `newPosition`: the new position\n *\n * @fires change - Fired when the board position changes\n *     The event's `detail` property has two properties:\n *       * `value`: the new position\n *       * `oldValue`: the old position\n *\n *     **Warning**: do *not* call any position-changing methods in your event\n *     listener or you may cause an infinite loop. Position-changing methods\n *     are: `clear()`, `move()`, `position()`, and `start()`.\n *\n * @fires error - Fired in the case of invalid attributes.\n *\n * @cssprop [--light-color=#f0d9b5] - The background for white squares and text color for black squares\n * @cssprop [--dark-color=#b58863] - The background for black squares and text color for white squares\n * @cssprop [--highlight-color=yellow] - The highlight color\n *\n * @csspart board - The chess board\n * @csspart square - A square on the board\n * @csspart piece - A chess piece\n * @csspart spare-pieces - The spare piece container\n * @csspart dragged-piece - The currently dragged piece\n * @csspart white - A white square\n * @csspart black - A black square\n * @csspart highlight - A highlighted square\n * @csspart notation - The square location labels\n * @csspart alpha - The alpha (column) labels\n * @csspart numeric - The numeric (row) labels\n */\n\nlet ChessBoardElement = class ChessBoardElement extends LitElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * Whether to show the board notation.\n     */\n\n    this.hideNotation = false;\n    /**\n     * The orientation of the board. `'white'` for the white player at the bottom,\n     * `'black'` for the black player at the bottom.\n     */\n\n    this.orientation = 'white';\n    /**\n     * If `true`, pieces on the board are draggable to other squares.\n     */\n\n    this.draggablePieces = false;\n    /**\n     * If `'snapback'`, pieces dropped off the board will return to their original\n     * square. If `'trash'`, pieces dropped off the board will be removed from the\n     * board.\n     *\n     * This property has no effect when `draggable` is `false`.\n     */\n\n    this.dropOffBoard = 'snapback';\n    /**\n     * A function that renders DOM for a piece to a container element. This\n     * function can render any elements and text, including SVG.\n     *\n     * The default value renders an SVG image of the piece, unless the\n     * `pieceTheme` property is set, then it uses `pieceTheme` to get the URL for\n     * an `<img>` element.\n     */\n\n    this.renderPiece = (piece, container) => {\n      let pieceImage = undefined;\n\n      if (isString(this.pieceTheme)) {\n        pieceImage = interpolateTemplate(this.pieceTheme, {\n          piece: piece\n        });\n      } else if (isFunction(this.pieceTheme)) {\n        pieceImage = this.pieceTheme(piece);\n      }\n\n      if (pieceImage === undefined) {\n        renderWikipediaSVGPiece(piece, container);\n      } else {\n        render(html`\n          <img class=\"piece-image\" src=${pieceImage} />\n        `, container);\n      }\n    };\n    /**\n     * Animation speed for when pieces move between squares or from spare pieces\n     * to the board.\n     */\n\n\n    this.moveSpeed = DEFAULT_MOVE_SPEED;\n    /**\n     * Animation speed for when pieces that were dropped outside the board return\n     * to their original square.\n     */\n\n    this.snapbackSpeed = DEFAULT_SNAPBACK_SPEED;\n    /**\n     * Animation speed for when pieces \\\"snap\\\" to a square when dropped.\n     */\n\n    this.snapSpeed = DEFAULT_SNAP_SPEED;\n    /**\n     * Animation speed for when pieces are removed.\n     */\n\n    this.trashSpeed = DEFAULT_TRASH_SPEED;\n    /**\n     * Animation speed for when pieces appear on a square.\n     *\n     * Note that the \"appear\" animation only occurs when `sparePieces` is `false`.\n     */\n\n    this.appearSpeed = DEFAULT_APPEAR_SPEED;\n    /**\n     * If `true`, the board will have spare pieces that can be dropped onto the\n     * board. If `sparePieces` is set to `true`, `draggablePieces` gets set to\n     * `true` as well.\n     */\n\n    this.sparePieces = false;\n    this._highlightedSquares = new Set();\n    this._animations = new Map();\n    this._currentPosition = {};\n\n    this._mousemoveWindow = e => {\n      var _a;\n\n      if (((_a = this._dragState) === null || _a === void 0 ? void 0 : _a.state) === 'dragging') {\n        this._updateDraggedPiece(e.clientX, e.clientY, e.pageX, e.pageY);\n      }\n    };\n\n    this._mouseupWindow = e => {\n      var _a; // do nothing if we are not dragging a piece\n\n\n      if (!(((_a = this._dragState) === null || _a === void 0 ? void 0 : _a.state) === 'dragging')) {\n        return;\n      } // get the location\n\n\n      const location = this._isXYOnSquare(e.clientX, e.clientY);\n\n      this._stopDraggedPiece(location);\n    };\n\n    this._touchmoveWindow = e => {\n      var _a; // do nothing if we are not dragging a piece\n\n\n      if (!(((_a = this._dragState) === null || _a === void 0 ? void 0 : _a.state) === 'dragging')) {\n        return;\n      } // prevent screen from scrolling\n\n\n      e.preventDefault();\n      const touch = e.changedTouches[0];\n\n      this._updateDraggedPiece(touch.clientX, touch.clientY, touch.pageX, touch.pageY);\n    };\n\n    this._touchendWindow = e => {\n      var _a; // do nothing if we are not dragging a piece\n\n\n      if (!(((_a = this._dragState) === null || _a === void 0 ? void 0 : _a.state) === 'dragging')) {\n        return;\n      } // get the location\n\n\n      const location = this._isXYOnSquare(e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n\n      this._stopDraggedPiece(location);\n    };\n  }\n  /**\n   * The current position of the board, as a `PositionObject`. This property may\n   * be set externally, but only to valid `PositionObject`s. The value is copied\n   * before being applied to the board. Changes to the position object are not\n   * reflected in th rendering.\n   *\n   * To set the position using FEN, or a keyword like `'start'`, or to use\n   * animations, use the `setPosition` method.\n   */\n\n\n  get position() {\n    return this._currentPosition;\n  }\n\n  set position(v) {\n    const oldValue = this._currentPosition;\n\n    this._setCurrentPosition(v);\n\n    this.requestUpdate('position', oldValue);\n  }\n  /**\n   * Whether to show the board notation. This is always the inverse of\n   * `hideNotation`, which reflects the `hide-notation` attribute.\n   *\n   * @default true\n   */\n\n\n  get showNotation() {\n    return !this.hideNotation;\n  }\n\n  set showNotation(v) {\n    this.hideNotation = !v;\n  }\n\n  get _squareSize() {\n    // Note: this isn't cached, but is called during user interactions, so we\n    // have a bit of time to use under RAIL guidelines.\n    return this.offsetWidth / 8;\n  }\n\n  _getSquareElement(square) {\n    return this.shadowRoot.getElementById(squareId(square));\n  }\n\n  _getSparePieceElement(piece) {\n    return this.shadowRoot.getElementById(sparePieceId(piece));\n  } // -------------------------------------------------------------------------\n  // DOM Building\n  // -------------------------------------------------------------------------\n\n\n  render() {\n    return html`\n      <div part=\"spare-pieces\">\n        ${this._renderSparePieces(this.orientation === 'white' ? 'black' : 'white')}\n      </div>\n      ${this._renderBoard()}\n      <div part=\"spare-pieces\">\n        ${this._renderSparePieces(this.orientation === 'white' ? 'white' : 'black')}\n      </div>\n      <div\n        id=\"dragged-pieces\"\n        style=${styleMap({\n      width: `${this._squareSize}px`,\n      height: `${this._squareSize}px`\n    })}\n      >\n        ${this._renderDraggedPiece()}\n      </div>\n    `;\n  }\n\n  _renderSparePieces(color) {\n    if (!this.sparePieces) {\n      return nothing;\n    }\n\n    const pieces = color === 'black' ? blackPieces : whitePieces; // The empty <div>s below are placeholders to get the shelf to line up with\n    // the board's grid. Another option would be to try to use the same grid,\n    // either with a single container, or subgrid/display:contents when those\n    // are available.\n\n    return html`\n      <div></div>\n      ${pieces.map(p => html`\n            <div\n              id=\"spare-${p}\"\n              @mousedown=${this._mousedownSparePiece}\n              @touchstart=${this._touchstartSparePiece}\n            >\n              ${this._renderPiece(p, {}, false, sparePieceId(p))}\n            </div>\n          `)}\n      <div></div>\n    `;\n  }\n\n  _renderDraggedPiece() {\n    var _a, _b;\n\n    const styles = {\n      height: `${this._squareSize}px`,\n      width: `${this._squareSize}px`\n    };\n    const dragState = this._dragState;\n\n    if (dragState !== undefined) {\n      styles.display = 'block';\n\n      if (dragState.state === 'dragging') {\n        const {\n          x,\n          y\n        } = dragState;\n        Object.assign(styles, {\n          top: `${y - this._squareSize / 2}px`,\n          left: `${x - this._squareSize / 2}px`\n        });\n      } else if (dragState.state === 'snapback') {\n        const {\n          source\n        } = dragState;\n\n        const square = this._getSquareElement(source);\n\n        const rect = square.getBoundingClientRect();\n        Object.assign(styles, {\n          transitionProperty: 'top, left',\n          transitionDuration: `${speedToMS(this.snapbackSpeed)}ms`,\n          top: `${rect.top}px`,\n          left: `${rect.left}px`\n        });\n      } else if (dragState.state === 'trash') {\n        const {\n          x,\n          y\n        } = dragState;\n        Object.assign(styles, {\n          transitionProperty: 'opacity',\n          transitionDuration: `${speedToMS(this.trashSpeed)}ms`,\n          opacity: '0',\n          top: `${y - this._squareSize / 2}px`,\n          left: `${x - this._squareSize / 2}px`\n        });\n      } else if (dragState.state === 'snap') {\n        const targetSquare = this._getSquareElement(dragState.location);\n\n        const rect = targetSquare.getBoundingClientRect();\n        Object.assign(styles, {\n          transitionProperty: 'top, left',\n          transitionDuration: `${speedToMS(this.snapSpeed)}ms`,\n          top: `${rect.top}px`,\n          left: `${rect.left}px`\n        });\n      }\n    }\n\n    return this._renderPiece((_b = (_a = this._dragState) === null || _a === void 0 ? void 0 : _a.piece, _b !== null && _b !== void 0 ? _b : ''), styles, false, undefined, 'dragged-piece');\n  }\n\n  _renderBoard() {\n    var _a, _b;\n\n    const squares = [];\n    const isFlipped = this.orientation === 'black';\n\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const file = COLUMNS[isFlipped ? 7 - col : col];\n        const rank = isFlipped ? row + 1 : 8 - row;\n        const square = `${file}${rank}`;\n        const squareColor = getSquareColor(square);\n        let piece = this._currentPosition[square];\n        const isDragSource = square === ((_a = this._dragState) === null || _a === void 0 ? void 0 : _a.source);\n\n        const animation = this._animations.get(square);\n\n        const highlight = isDragSource || this._highlightedSquares.has(square) ? 'highlight' : '';\n\n        const pieceStyles = this._getAnimationStyles(piece, animation);\n\n        if (!piece && ((_b = animation) === null || _b === void 0 ? void 0 : _b.type) === 'clear') {\n          // Preserve the piece until the animation is complete\n          piece = animation.piece;\n        }\n\n        squares.push(html`\n          <div\n            class=\"square\"\n            id=${squareId(square)}\n            data-square=${square}\n            part=\"square ${square} ${squareColor} ${highlight}\"\n            @mousedown=${this._mousedownSquare}\n            @mouseenter=${this._mouseenterSquare}\n            @mouseleave=${this._mouseleaveSquare}\n            @touchstart=${this._touchstartSquare}\n          >\n            ${this.showNotation && row === 7 ? html`\n                  <div part=\"notation alpha\">${file}</div>\n                ` : nothing}\n            ${this.showNotation && col === 0 ? html`\n                  <div part=\"notation numeric\">${rank}</div>\n                ` : nothing}\n            ${this._renderPiece(piece, pieceStyles, isDragSource)}\n          </div>\n        `);\n      }\n    }\n\n    const styles = {\n      width: this._squareSize * 8 + 'px',\n      height: this._squareSize * 8 + 'px'\n    };\n    return html`\n      <div part=\"board\" style=${styleMap(styles)}>${squares}</div>\n    `;\n  }\n\n  _renderPiece(piece, styles, isDragSource, id, part) {\n    if (piece === undefined) {\n      return nothing;\n    }\n\n    const style = Object.assign({\n      opacity: '1',\n      transitionProperty: '',\n      transitionDuration: '0ms'\n    }, styles);\n\n    if (isDragSource || piece === '') {\n      style.display = 'none';\n    }\n\n    if (piece === '') {\n      return nothing;\n    }\n\n    if (!isFunction(this.renderPiece)) {\n      this._error(8272, 'invalid renderPiece.');\n    }\n\n    return html`\n      <div\n        id=${ifDefined(id)}\n        part=\"piece ${part !== null && part !== void 0 ? part : ''}\"\n        piece=${piece}\n        style=${styleMap(style)}\n        ...=${renderPieceDirective(piece, this.renderPiece)}\n      ></div>\n    `;\n  }\n\n  _getAnimationStyles(piece, animation) {\n    if (animation) {\n      if (piece && (animation.type === 'move-start' || animation.type === 'add-start' && this.draggablePieces)) {\n        // Position the moved piece absolutely at the source\n        const srcSquare = animation.type === 'move-start' ? this._getSquareElement(animation.source) : this._getSparePieceElement(piece);\n        const destSquare = animation.type === 'move-start' ? this._getSquareElement(animation.destination) : this._getSquareElement(animation.square);\n        const srcSquareRect = srcSquare.getBoundingClientRect();\n        const destSquareRect = destSquare.getBoundingClientRect();\n        return {\n          position: 'absolute',\n          left: `${srcSquareRect.left - destSquareRect.left}px`,\n          top: `${srcSquareRect.top - destSquareRect.top}px`,\n          width: `${this._squareSize}px`,\n          height: `${this._squareSize}px`\n        };\n      }\n\n      if (piece && (animation.type === 'move' || animation.type === 'add' && this.draggablePieces)) {\n        // Transition the moved piece to the destination\n        return {\n          position: 'absolute',\n          transitionProperty: 'top, left',\n          transitionDuration: `${speedToMS(this.moveSpeed)}ms`,\n          top: `0`,\n          left: `0`,\n          width: `${this._squareSize}px`,\n          height: `${this._squareSize}px`\n        };\n      }\n\n      if (!piece && animation.type === 'clear') {\n        // Preserve and transition a removed piece to opacity 0\n        piece = animation.piece;\n        return {\n          transitionProperty: 'opacity',\n          transitionDuration: `${speedToMS(this.trashSpeed)}ms`,\n          opacity: '0'\n        };\n      }\n\n      if (piece && animation.type === 'add-start') {\n        // Initialize an added piece to opacity 0\n        return {\n          opacity: '0'\n        };\n      }\n\n      if (piece && animation.type === 'add') {\n        // Transition an added piece to opacity 1\n        return {\n          transitionProperty: 'opacity',\n          transitionDuration: `${speedToMS(this.appearSpeed)}ms`\n        };\n      }\n    }\n\n    return {};\n  } // -------------------------------------------------------------------------\n  // Event Listeners\n  // -------------------------------------------------------------------------\n\n\n  _mousedownSquare(e) {\n    e.preventDefault(); // do nothing if we're not draggable. sparePieces implies draggable\n\n    if (!this.draggablePieces && !this.sparePieces) {\n      return;\n    } // do nothing if there is no piece on this square\n\n\n    const squareEl = e.currentTarget;\n    const square = squareEl.getAttribute('data-square');\n\n    if (square === null) {\n      return;\n    }\n\n    if (!this._currentPosition.hasOwnProperty(square)) {\n      return;\n    }\n\n    this._beginDraggingPiece(square, this._currentPosition[square], e.pageX, e.pageY);\n  }\n\n  _mousedownSparePiece(e) {\n    e.preventDefault(); // do nothing if sparePieces is not enabled\n\n    if (!this.sparePieces) {\n      return;\n    }\n\n    const sparePieceContainerEl = e.currentTarget;\n    const pieceEl = sparePieceContainerEl.querySelector('[part~=piece]');\n    const piece = pieceEl.getAttribute('piece');\n\n    this._beginDraggingPiece('spare', piece, e.pageX, e.pageY);\n  }\n\n  _mouseenterSquare(e) {\n    // do not fire this event if we are dragging a piece\n    // NOTE: this should never happen, but it's a safeguard\n    if (this._dragState !== undefined) {\n      return;\n    } // get the square\n\n\n    const square = e.currentTarget.getAttribute('data-square'); // NOTE: this should never happen; defensive\n\n    if (!validSquare(square)) {\n      return;\n    } // get the piece on this square\n\n\n    let piece = false;\n\n    if (this._currentPosition.hasOwnProperty(square)) {\n      piece = this._currentPosition[square];\n    }\n\n    this.dispatchEvent(new CustomEvent('mouseover-square', {\n      bubbles: true,\n      detail: {\n        square,\n        piece,\n        position: deepCopy(this._currentPosition),\n        orientation: this.orientation\n      }\n    }));\n  }\n\n  _mouseleaveSquare(e) {\n    // do not fire this event if we are dragging a piece\n    // NOTE: this should never happen, but it's a safeguard\n    if (this._dragState !== undefined) {\n      return;\n    } // get the square\n\n\n    const square = e.currentTarget.getAttribute('data-square'); // NOTE: this should never happen; defensive\n\n    if (!validSquare(square)) {\n      return;\n    } // get the piece on this square\n\n\n    let piece = false;\n\n    if (this._currentPosition.hasOwnProperty(square)) {\n      piece = this._currentPosition[square];\n    } // execute their function\n\n\n    this.dispatchEvent(new CustomEvent('mouseout-square', {\n      bubbles: true,\n      detail: {\n        square,\n        piece,\n        position: deepCopy(this._currentPosition),\n        orientation: this.orientation\n      }\n    }));\n  }\n\n  _touchstartSquare(e) {\n    // do nothing if we're not draggable. sparePieces implies draggable\n    if (!this.draggablePieces && !this.sparePieces) {\n      return;\n    } // do nothing if there is no piece on this square\n\n\n    const squareEl = e.target.closest('[data-square]');\n    const square = squareEl.getAttribute('data-square');\n\n    if (!validSquare(square)) {\n      return;\n    }\n\n    if (!this._currentPosition.hasOwnProperty(square)) {\n      return;\n    }\n\n    e.preventDefault();\n\n    this._beginDraggingPiece(square, this._currentPosition[square], e.changedTouches[0].pageX, e.changedTouches[0].pageY);\n  }\n\n  _touchstartSparePiece(e) {\n    // do nothing if sparePieces is not enabled\n    if (!this.sparePieces) return;\n    const pieceEl = e.target.closest('[piece]');\n    const piece = pieceEl.getAttribute('piece');\n    e.preventDefault();\n\n    this._beginDraggingPiece('spare', piece, e.changedTouches[0].pageX, e.changedTouches[0].pageY);\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Sets the position of the board.\n   *\n   * @param useAnimation If `true`, animate to the new position. If `false`,\n   *   show the new position instantly.\n   */\n\n\n  setPosition(position, useAnimation = true) {\n    position = normalizePozition(position); // validate position object\n\n    if (!validPositionObject(position)) {\n      throw this._error(6482, 'Invalid value passed to the position method.', position);\n    }\n\n    if (useAnimation) {\n      // start the animations\n      const animations = this._calculateAnimations(this._currentPosition, position);\n\n      this._doAnimations(animations, this._currentPosition, position);\n    }\n\n    this._setCurrentPosition(position);\n\n    this.requestUpdate();\n  }\n  /**\n   * Returns the current position as a FEN string.\n   */\n\n\n  fen() {\n    return objToFen(this._currentPosition);\n  }\n  /**\n   * Sets the board to the start position.\n   *\n   * @param useAnimation If `true`, animate to the new position. If `false`,\n   *   show the new position instantly.\n   */\n\n\n  start(useAnimation) {\n    this.setPosition('start', useAnimation);\n  }\n  /**\n   * Removes all the pieces on the board. If `useAnimation` is `false`, removes\n   * pieces instantly.\n   *\n   * This is shorthand for `setPosition({})`.\n   *\n   * @param useAnimation If `true`, animate to the new position. If `false`,\n   *   show the new position instantly.\n   */\n\n\n  clear(useAnimation) {\n    this.setPosition({}, useAnimation);\n  }\n  /**\n   * Executes one or more moves on the board.\n   *\n   * Moves are strings the form of \"e2-e4\", \"f6-d5\", etc., Pass `false` as an\n   * argument to disable animation.\n   */\n\n\n  move(...args) {\n    let useAnimation = true; // collect the moves into an object\n\n    const moves = {};\n\n    for (const arg of args) {\n      // any \"false\" to this function means no animations\n      if (arg === false) {\n        useAnimation = false;\n        continue;\n      } // skip invalid arguments\n\n\n      if (!validMove(arg)) {\n        this._error(2826, 'Invalid move passed to the move method.', arg);\n\n        continue;\n      }\n\n      const [from, to] = arg.split('-');\n      moves[from] = to;\n    } // calculate position from moves\n\n\n    const newPos = calculatePositionFromMoves(this._currentPosition, moves); // update the board\n\n    this.setPosition(newPos, useAnimation); // return the new position object\n\n    return newPos;\n  }\n  /**\n   * Flip the orientation.\n   */\n\n\n  flip() {\n    this.orientation = this.orientation === 'white' ? 'black' : 'white';\n  }\n  /**\n   * Recalculates board and square sizes based on the parent element and redraws\n   * the board accordingly.\n   */\n\n\n  resize() {\n    this.requestUpdate();\n  } // -------------------------------------------------------------------------\n  // Lifecycle Callbacks\n  // -------------------------------------------------------------------------\n\n\n  firstUpdated() {\n    // We need to re-render to read the size of the container\n    this.requestUpdate();\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('mousemove', this._mousemoveWindow);\n    window.addEventListener('mouseup', this._mouseupWindow);\n    window.addEventListener('touchmove', this._touchmoveWindow, {\n      passive: false\n    });\n    window.addEventListener('touchend', this._touchendWindow, {\n      passive: false\n    });\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener('mousemove', this._mousemoveWindow);\n    window.removeEventListener('mouseup', this._mouseupWindow);\n    window.removeEventListener('touchmove', this._touchmoveWindow);\n    window.removeEventListener('touchend', this._touchendWindow);\n  } // -------------------------------------------------------------------------\n  // Control Flow\n  // -------------------------------------------------------------------------\n\n\n  _setCurrentPosition(position) {\n    const oldPos = deepCopy(this._currentPosition);\n    const newPos = deepCopy(position);\n    const oldFen = objToFen(oldPos);\n    const newFen = objToFen(newPos); // do nothing if no change in position\n\n    if (oldFen === newFen) return; // Fire change event\n\n    this.dispatchEvent(new CustomEvent('change', {\n      bubbles: true,\n      detail: {\n        value: newPos,\n        oldValue: oldPos\n      }\n    })); // update state\n\n    this._currentPosition = position;\n  }\n\n  _isXYOnSquare(x, y) {\n    // TODO: test that this works with the polyfill\n    const elements = this.shadowRoot.elementsFromPoint(x, y);\n    const squareEl = elements.find(e => e.classList.contains('square'));\n    const square = squareEl === undefined ? 'offboard' : squareEl.getAttribute('data-square');\n    return square;\n  }\n\n  _highlightSquare(square, value = true) {\n    if (value) {\n      this._highlightedSquares.add(square);\n    } else {\n      this._highlightedSquares.delete(square);\n    }\n\n    this.requestUpdate('_highlightedSquares');\n  }\n\n  async _snapbackDraggedPiece() {\n    assertIsDragging(this._dragState);\n    const {\n      source,\n      piece\n    } = this._dragState; // there is no \"snapback\" for spare pieces\n\n    if (source === 'spare') {\n      return this._trashDraggedPiece();\n    }\n\n    this._dragState = {\n      state: 'snapback',\n      piece,\n      source\n    }; // Wait for a paint\n\n    this.requestUpdate();\n    await new Promise(resolve => setTimeout(resolve, 0));\n    return new Promise(resolve => {\n      const transitionComplete = () => {\n        this._draggedPieceElement.removeEventListener('transitionend', transitionComplete);\n\n        resolve();\n        this.dispatchEvent(new CustomEvent('snapback-end', {\n          bubbles: true,\n          detail: {\n            piece: piece,\n            square: source,\n            position: deepCopy(this._currentPosition),\n            orientation: this.orientation\n          }\n        }));\n      };\n\n      this._draggedPieceElement.addEventListener('transitionend', transitionComplete);\n    });\n  }\n\n  async _trashDraggedPiece() {\n    assertIsDragging(this._dragState);\n    const {\n      source,\n      piece\n    } = this._dragState; // remove the source piece\n\n    const newPosition = deepCopy(this._currentPosition);\n    delete newPosition[source];\n\n    this._setCurrentPosition(newPosition);\n\n    this._dragState = {\n      state: 'trash',\n      piece,\n      x: this._dragState.x,\n      y: this._dragState.y,\n      source: this._dragState.source\n    }; // Wait for a paint\n\n    this.requestUpdate();\n    await new Promise(resolve => setTimeout(resolve, 0));\n    return new Promise(resolve => {\n      const transitionComplete = () => {\n        this._draggedPieceElement.removeEventListener('transitionend', transitionComplete);\n\n        resolve();\n      };\n\n      this._draggedPieceElement.addEventListener('transitionend', transitionComplete);\n    });\n  }\n\n  async _dropDraggedPieceOnSquare(square) {\n    assertIsDragging(this._dragState);\n    const {\n      source,\n      piece\n    } = this._dragState; // update position\n\n    const newPosition = deepCopy(this._currentPosition);\n    delete newPosition[source];\n    newPosition[square] = piece;\n\n    this._setCurrentPosition(newPosition);\n\n    this._dragState = {\n      state: 'snap',\n      piece,\n      location: square,\n      source: square\n    }; // Wait for a paint\n\n    this.requestUpdate();\n    await new Promise(resolve => setTimeout(resolve, 0));\n    return new Promise(resolve => {\n      const transitionComplete = () => {\n        this._draggedPieceElement.removeEventListener('transitionend', transitionComplete);\n\n        resolve(); // Fire the snap-end event\n\n        this.dispatchEvent(new CustomEvent('snap-end', {\n          bubbles: true,\n          detail: {\n            source,\n            square,\n            piece\n          }\n        }));\n      };\n\n      this._draggedPieceElement.addEventListener('transitionend', transitionComplete);\n    });\n  }\n\n  _beginDraggingPiece(source, piece, x, y) {\n    // Fire cancalable drag-start event\n    const event = new CustomEvent('drag-start', {\n      bubbles: true,\n      cancelable: true,\n      detail: {\n        source,\n        piece,\n        position: deepCopy(this._currentPosition),\n        orientation: this.orientation\n      }\n    });\n    this.dispatchEvent(event);\n\n    if (event.defaultPrevented) {\n      return;\n    } // set state\n\n\n    this._dragState = {\n      state: 'dragging',\n      x,\n      y,\n      piece,\n      // if the piece came from spare pieces, location is offboard\n      location: source === 'spare' ? 'offboard' : source,\n      source\n    };\n    this.requestUpdate();\n  }\n\n  _updateDraggedPiece(clientX, clientY, pageX, pageY) {\n    assertIsDragging(this._dragState); // put the dragged piece over the mouse cursor\n\n    this._dragState.x = pageX;\n    this._dragState.y = pageY;\n    this.requestUpdate();\n\n    const location = this._isXYOnSquare(clientX, clientY); // do nothing more if the location has not changed\n\n\n    if (location === this._dragState.location) {\n      return;\n    } // remove highlight from previous square\n\n\n    if (validSquare(this._dragState.location)) {\n      this._highlightSquare(this._dragState.location, false);\n    } // add highlight to new square\n\n\n    if (validSquare(location)) {\n      this._highlightSquare(location);\n    }\n\n    this.dispatchEvent(new CustomEvent('drag-move', {\n      bubbles: true,\n      detail: {\n        newLocation: location,\n        oldLocation: this._dragState.location,\n        source: this._dragState.source,\n        piece: this._dragState.piece,\n        position: deepCopy(this._currentPosition),\n        orientation: this.orientation\n      }\n    })); // update state\n\n    this._dragState.location = location;\n  }\n\n  async _stopDraggedPiece(location) {\n    assertIsDragging(this._dragState);\n    const {\n      source,\n      piece\n    } = this._dragState; // determine what the action should be\n\n    let action = 'drop';\n\n    if (location === 'offboard') {\n      action = this.dropOffBoard === 'trash' ? 'trash' : 'snapback';\n    }\n\n    const newPosition = deepCopy(this._currentPosition);\n    const oldPosition = deepCopy(this._currentPosition); // source piece is a spare piece and position is on the board\n\n    if (source === 'spare' && validSquare(location)) {\n      // add the piece to the board\n      newPosition[location] = piece;\n    } // source piece was on the board\n\n\n    if (validSquare(source)) {\n      // remove the piece from the board\n      delete newPosition[source]; // new position is on the board\n\n      if (validSquare(location)) {\n        // move the piece\n        newPosition[location] = piece;\n      }\n    } // Fire the drop event\n    // Listeners can potentially change the drop action\n\n\n    const dropEvent = new CustomEvent('drop', {\n      bubbles: true,\n      detail: {\n        source,\n        target: location,\n        piece,\n        newPosition,\n        oldPosition,\n        orientation: this.orientation,\n\n        setAction(a) {\n          action = a;\n        }\n\n      }\n    });\n    this.dispatchEvent(dropEvent);\n\n    this._highlightedSquares.clear(); // do it!\n\n\n    if (action === 'snapback') {\n      await this._snapbackDraggedPiece();\n    } else if (action === 'trash') {\n      await this._trashDraggedPiece();\n    } else if (action === 'drop') {\n      await this._dropDraggedPieceOnSquare(location);\n    } // clear state\n\n\n    this._dragState = undefined; // Render the final non-dragging state\n\n    this.requestUpdate();\n  } // -------------------------------------------------------------------------\n  // Animations\n  // -------------------------------------------------------------------------\n  // calculate an array of animations that need to happen in order to get\n  // from pos1 to pos2\n\n\n  _calculateAnimations(pos1, pos2) {\n    // make copies of both\n    pos1 = deepCopy(pos1);\n    pos2 = deepCopy(pos2);\n    const animations = [];\n    const squaresMovedTo = {}; // remove pieces that are the same in both positions\n\n    for (const i in pos2) {\n      if (!pos2.hasOwnProperty(i)) continue;\n\n      if (pos1.hasOwnProperty(i) && pos1[i] === pos2[i]) {\n        delete pos1[i];\n        delete pos2[i];\n      }\n    } // find all the \"move\" animations\n\n\n    for (const i in pos2) {\n      if (!pos2.hasOwnProperty(i)) continue;\n      const closestPiece = findClosestPiece(pos1, pos2[i], i);\n\n      if (closestPiece) {\n        animations.push({\n          type: 'move',\n          source: closestPiece,\n          destination: i,\n          piece: pos2[i]\n        });\n        delete pos1[closestPiece];\n        delete pos2[i];\n        squaresMovedTo[i] = true;\n      }\n    } // \"add\" animations\n\n\n    for (const i in pos2) {\n      if (!pos2.hasOwnProperty(i)) {\n        continue;\n      }\n\n      animations.push({\n        type: 'add',\n        square: i,\n        piece: pos2[i]\n      });\n      delete pos2[i];\n    } // \"clear\" animations\n\n\n    for (const i in pos1) {\n      if (!pos1.hasOwnProperty(i)) continue; // do not clear a piece if it is on a square that is the result\n      // of a \"move\", ie: a piece capture\n\n      if (squaresMovedTo.hasOwnProperty(i)) continue;\n      animations.push({\n        type: 'clear',\n        square: i,\n        piece: pos1[i]\n      });\n      delete pos1[i];\n    }\n\n    return animations;\n  } // execute an array of animations\n\n\n  async _doAnimations(animations, oldPos, newPos) {\n    if (animations.length === 0) {\n      return;\n    }\n\n    let numFinished = 0;\n\n    const transitionEndListener = () => {\n      numFinished++;\n\n      if (numFinished === animations.length) {\n        this.shadowRoot.removeEventListener('transitionend', transitionEndListener);\n\n        this._animations.clear();\n\n        this.requestUpdate();\n        this.dispatchEvent(new CustomEvent('move-end', {\n          bubbles: true,\n          detail: {\n            oldPosition: deepCopy(oldPos),\n            newPosition: deepCopy(newPos)\n          }\n        }));\n      }\n    };\n\n    this.shadowRoot.addEventListener('transitionend', transitionEndListener); // Render once with added pieces at opacity 0\n\n    this._animations.clear();\n\n    for (const animation of animations) {\n      if (animation.type === 'add' || animation.type === 'add-start') {\n        this._animations.set(animation.square, Object.assign(Object.assign({}, animation), {\n          type: 'add-start'\n        }));\n      } else if (animation.type === 'move' || animation.type === 'move-start') {\n        this._animations.set(animation.destination, Object.assign(Object.assign({}, animation), {\n          type: 'move-start'\n        }));\n      } else {\n        this._animations.set(animation.square, animation);\n      }\n    } // Wait for a paint\n\n\n    this.requestUpdate();\n    await new Promise(resolve => setTimeout(resolve, 0)); // Render again with the piece at opacity 1 with a transition\n\n    this._animations.clear();\n\n    for (const animation of animations) {\n      if (animation.type === 'move' || animation.type === 'move-start') {\n        this._animations.set(animation.destination, animation);\n      } else {\n        this._animations.set(animation.square, animation);\n      }\n    }\n\n    this.requestUpdate();\n  } // -------------------------------------------------------------------------\n  // Validation / Errors\n  // -------------------------------------------------------------------------\n\n\n  _error(code, msg, _obj) {\n    const errorText = `Chessboard Error ${code} : ${msg}`;\n    this.dispatchEvent(new ErrorEvent('error', {\n      message: errorText\n    }));\n    return new Error(errorText);\n  }\n\n};\nChessBoardElement.styles = styles;\n\n__decorate([property({\n  converter: value => normalizePozition(value)\n})], ChessBoardElement.prototype, \"position\", null);\n\n__decorate([property({\n  attribute: 'hide-notation',\n  type: Boolean\n})], ChessBoardElement.prototype, \"hideNotation\", void 0);\n\n__decorate([property()], ChessBoardElement.prototype, \"orientation\", void 0);\n\n__decorate([property({\n  attribute: 'draggable-pieces',\n  type: Boolean\n})], ChessBoardElement.prototype, \"draggablePieces\", void 0);\n\n__decorate([property({\n  attribute: 'drop-off-board'\n})], ChessBoardElement.prototype, \"dropOffBoard\", void 0);\n\n__decorate([property({\n  attribute: 'piece-theme'\n})], ChessBoardElement.prototype, \"pieceTheme\", void 0);\n\n__decorate([property({\n  attribute: false\n})], ChessBoardElement.prototype, \"renderPiece\", void 0);\n\n__decorate([property({\n  attribute: 'move-speed'\n})], ChessBoardElement.prototype, \"moveSpeed\", void 0);\n\n__decorate([property({\n  attribute: 'snapback-speed'\n})], ChessBoardElement.prototype, \"snapbackSpeed\", void 0);\n\n__decorate([property({\n  attribute: 'snap-speed'\n})], ChessBoardElement.prototype, \"snapSpeed\", void 0);\n\n__decorate([property({\n  attribute: 'trash-speed'\n})], ChessBoardElement.prototype, \"trashSpeed\", void 0);\n\n__decorate([property({\n  attribute: 'appear-speed'\n})], ChessBoardElement.prototype, \"appearSpeed\", void 0);\n\n__decorate([property({\n  attribute: 'spare-pieces',\n  type: Boolean\n})], ChessBoardElement.prototype, \"sparePieces\", void 0);\n\n__decorate([query('[part~=\"dragged-piece\"]')], ChessBoardElement.prototype, \"_draggedPieceElement\", void 0);\n\nChessBoardElement = __decorate([customElement('chess-board')], ChessBoardElement);\nexport { ChessBoardElement };","map":{"version":3,"sources":["../src/lib/chessboard-element.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * Copyright (c) 2019, Chris Oakman\n * Copyright (c) 2019, Justin Fagnani\n * Released under the MIT license\n * https://github.com/justinfagnani/chessboard-element/blob/master/LICENSE.md\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { customElement, property, LitElement, html, query } from 'lit-element';\nimport { render, directive, removeNodes } from 'lit-html';\nimport { styleMap } from 'lit-html/directives/style-map.js';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\nimport { nothing } from 'lit-html';\nimport { deepCopy, interpolateTemplate, isString, isFunction } from './utils.js';\nimport { styles } from './chessboard-styles.js';\nimport { objToFen, findClosestPiece, calculatePositionFromMoves, validMove, validSquare, validPositionObject, COLUMNS, normalizePozition, getSquareColor, blackPieces, whitePieces, } from './chess-utils.js';\nimport { renderPiece as renderWikipediaSVGPiece } from './wikipedia-pieces-svg.js';\n// ---------------------------------------------------------------------------\n// Constants\n// ---------------------------------------------------------------------------\n// default animation speeds\nconst DEFAULT_APPEAR_SPEED = 200;\nconst DEFAULT_MOVE_SPEED = 200;\nconst DEFAULT_SNAPBACK_SPEED = 60;\nconst DEFAULT_SNAP_SPEED = 30;\nconst DEFAULT_TRASH_SPEED = 100;\n// ---------------------------------------------------------------------------\n// Predicates\n// ---------------------------------------------------------------------------\nfunction assertIsDragging(dragState) {\n    var _a;\n    if (((_a = dragState) === null || _a === void 0 ? void 0 : _a.state) !== 'dragging') {\n        throw new Error(`unexpected drag state ${JSON.stringify(dragState)}`);\n    }\n}\nconst speedToMS = (speed) => {\n    if (typeof speed === 'number') {\n        return speed;\n    }\n    if (speed === 'fast') {\n        return 200;\n    }\n    if (speed === 'slow') {\n        return 600;\n    }\n    return parseInt(speed, 10);\n};\nconst squareId = (square) => `square-${square}`;\nconst sparePieceId = (piece) => `spare-piece-${piece}`;\nconst renderPieceDirective = directive((piece, renderPiece) => (part) => {\n    if (isFunction(renderPiece)) {\n        renderPiece(piece, part.committer.element);\n    }\n    else {\n        removeNodes(part.committer.element, part.committer.element.firstChild);\n    }\n});\n/**\n * A custom element that renders an interactive chess board.\n *\n * @fires mouseover-square - Fired when the cursor is over a square\n *     The event's `detail` object has the following properties:\n *       * `square`: the square that was entered\n *       * `piece`: the piece on that square (or `false` if there is no piece)\n *       * `position`: the current position\n *       * `orientation`: the current orientation.\n *\n *     Note that `mouseover-square` will *not* fire during piece drag and drop.\n *     Use `drag-move` instead.\n *\n * @fires mouseout-square - Fired when the cursor exits a square\n *     The event's `detail` object has the following properties:\n *       `square`: the square that was left\n *       `piece`: the piece on that square (or `false` if there is no piece)\n *       `position`: the current position\n *       `orientation`: the current orientation.\n *\n *     Note that `mouseout-square` will *not* fire during piece drag and drop.\n *     Use `drag-move` instead.\n *\n * @fires snapback-end - Fired when the snapback animation is complete when\n *     pieces are dropped off the board.\n *     The event's `detail` object has the following properties:\n *       * `piece`: the dragged piece\n *       * `square`: the square the piece returned to\n *       * `position`: the current position\n *       * `orientation`: the current orientation.\n *\n * @fires snap-end - Fired when a piece completes a snap animation\n *     The event's `detail` object has the following properties:\n *       * `source`: the source of the dragged piece\n *       * `square`: the target of the dragged piece\n *       * `piece`: the dragged piece\n *\n * @fires drag-start - Fired when a piece is picked up\n *     The event's `detail` object has the following properties:\n *       * `source`: the source of the piece\n *       * `piece`: the piece\n *       * `position`: the current position on the board\n *       * `orientation`: the current orientation.\n *\n *     The drag action is prevented if the listener calls `event.preventDefault()`.\n *\n * @fires drag-move - Fired when a user-initiated drag moves\n *     The event's `detail` object has the following properties:\n *       * `newLocation`: the new location of the piece\n *       * `oldLocation`: the old location of the piece\n *       * `source`: the source of the dragged piece\n *       * `piece`: the piece\n *       * `position`: the current position on the board\n *       * `orientation`: the current orientation.\n *\n * @fires drop - Fired when a user-initiated drag ends\n *     The event's `detail` object has the following properties:\n *       * `source`: the source of the dragged piece\n *       * `target`: the target of the dragged piece\n *       * `piece`: the piece\n *       * `newPosition`: the new position once the piece drops\n *       * `oldPosition`: the old position before the piece was picked up\n *       * `orientation`: the current orientation.\n *       * `setAction(action)`: a function to call to change the default action.\n *         If `'snapback'` is passed to `setAction`, the piece will return to it's source square.\n *         If `'trash'` is passed to `setAction`, the piece will be removed.\n *\n * @fires move-end - Fired when a piece move completes\n *    The event's `detail` object has the following properties:\n *      * `oldPosition`: the old position\n *      * `newPosition`: the new position\n *\n * @fires change - Fired when the board position changes\n *     The event's `detail` property has two properties:\n *       * `value`: the new position\n *       * `oldValue`: the old position\n *\n *     **Warning**: do *not* call any position-changing methods in your event\n *     listener or you may cause an infinite loop. Position-changing methods\n *     are: `clear()`, `move()`, `position()`, and `start()`.\n *\n * @fires error - Fired in the case of invalid attributes.\n *\n * @cssprop [--light-color=#f0d9b5] - The background for white squares and text color for black squares\n * @cssprop [--dark-color=#b58863] - The background for black squares and text color for white squares\n * @cssprop [--highlight-color=yellow] - The highlight color\n *\n * @csspart board - The chess board\n * @csspart square - A square on the board\n * @csspart piece - A chess piece\n * @csspart spare-pieces - The spare piece container\n * @csspart dragged-piece - The currently dragged piece\n * @csspart white - A white square\n * @csspart black - A black square\n * @csspart highlight - A highlighted square\n * @csspart notation - The square location labels\n * @csspart alpha - The alpha (column) labels\n * @csspart numeric - The numeric (row) labels\n */\nlet ChessBoardElement = class ChessBoardElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Whether to show the board notation.\n         */\n        this.hideNotation = false;\n        /**\n         * The orientation of the board. `'white'` for the white player at the bottom,\n         * `'black'` for the black player at the bottom.\n         */\n        this.orientation = 'white';\n        /**\n         * If `true`, pieces on the board are draggable to other squares.\n         */\n        this.draggablePieces = false;\n        /**\n         * If `'snapback'`, pieces dropped off the board will return to their original\n         * square. If `'trash'`, pieces dropped off the board will be removed from the\n         * board.\n         *\n         * This property has no effect when `draggable` is `false`.\n         */\n        this.dropOffBoard = 'snapback';\n        /**\n         * A function that renders DOM for a piece to a container element. This\n         * function can render any elements and text, including SVG.\n         *\n         * The default value renders an SVG image of the piece, unless the\n         * `pieceTheme` property is set, then it uses `pieceTheme` to get the URL for\n         * an `<img>` element.\n         */\n        this.renderPiece = (piece, container) => {\n            let pieceImage = undefined;\n            if (isString(this.pieceTheme)) {\n                pieceImage = interpolateTemplate(this.pieceTheme, { piece: piece });\n            }\n            else if (isFunction(this.pieceTheme)) {\n                pieceImage = this.pieceTheme(piece);\n            }\n            if (pieceImage === undefined) {\n                renderWikipediaSVGPiece(piece, container);\n            }\n            else {\n                render(html `\n          <img class=\"piece-image\" src=${pieceImage} />\n        `, container);\n            }\n        };\n        /**\n         * Animation speed for when pieces move between squares or from spare pieces\n         * to the board.\n         */\n        this.moveSpeed = DEFAULT_MOVE_SPEED;\n        /**\n         * Animation speed for when pieces that were dropped outside the board return\n         * to their original square.\n         */\n        this.snapbackSpeed = DEFAULT_SNAPBACK_SPEED;\n        /**\n         * Animation speed for when pieces \\\"snap\\\" to a square when dropped.\n         */\n        this.snapSpeed = DEFAULT_SNAP_SPEED;\n        /**\n         * Animation speed for when pieces are removed.\n         */\n        this.trashSpeed = DEFAULT_TRASH_SPEED;\n        /**\n         * Animation speed for when pieces appear on a square.\n         *\n         * Note that the \"appear\" animation only occurs when `sparePieces` is `false`.\n         */\n        this.appearSpeed = DEFAULT_APPEAR_SPEED;\n        /**\n         * If `true`, the board will have spare pieces that can be dropped onto the\n         * board. If `sparePieces` is set to `true`, `draggablePieces` gets set to\n         * `true` as well.\n         */\n        this.sparePieces = false;\n        this._highlightedSquares = new Set();\n        this._animations = new Map();\n        this._currentPosition = {};\n        this._mousemoveWindow = (e) => {\n            var _a;\n            if (((_a = this._dragState) === null || _a === void 0 ? void 0 : _a.state) === 'dragging') {\n                this._updateDraggedPiece(e.clientX, e.clientY, e.pageX, e.pageY);\n            }\n        };\n        this._mouseupWindow = (e) => {\n            var _a;\n            // do nothing if we are not dragging a piece\n            if (!(((_a = this._dragState) === null || _a === void 0 ? void 0 : _a.state) === 'dragging')) {\n                return;\n            }\n            // get the location\n            const location = this._isXYOnSquare(e.clientX, e.clientY);\n            this._stopDraggedPiece(location);\n        };\n        this._touchmoveWindow = (e) => {\n            var _a;\n            // do nothing if we are not dragging a piece\n            if (!(((_a = this._dragState) === null || _a === void 0 ? void 0 : _a.state) === 'dragging')) {\n                return;\n            }\n            // prevent screen from scrolling\n            e.preventDefault();\n            const touch = e.changedTouches[0];\n            this._updateDraggedPiece(touch.clientX, touch.clientY, touch.pageX, touch.pageY);\n        };\n        this._touchendWindow = (e) => {\n            var _a;\n            // do nothing if we are not dragging a piece\n            if (!(((_a = this._dragState) === null || _a === void 0 ? void 0 : _a.state) === 'dragging')) {\n                return;\n            }\n            // get the location\n            const location = this._isXYOnSquare(e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n            this._stopDraggedPiece(location);\n        };\n    }\n    /**\n     * The current position of the board, as a `PositionObject`. This property may\n     * be set externally, but only to valid `PositionObject`s. The value is copied\n     * before being applied to the board. Changes to the position object are not\n     * reflected in th rendering.\n     *\n     * To set the position using FEN, or a keyword like `'start'`, or to use\n     * animations, use the `setPosition` method.\n     */\n    get position() {\n        return this._currentPosition;\n    }\n    set position(v) {\n        const oldValue = this._currentPosition;\n        this._setCurrentPosition(v);\n        this.requestUpdate('position', oldValue);\n    }\n    /**\n     * Whether to show the board notation. This is always the inverse of\n     * `hideNotation`, which reflects the `hide-notation` attribute.\n     *\n     * @default true\n     */\n    get showNotation() {\n        return !this.hideNotation;\n    }\n    set showNotation(v) {\n        this.hideNotation = !v;\n    }\n    get _squareSize() {\n        // Note: this isn't cached, but is called during user interactions, so we\n        // have a bit of time to use under RAIL guidelines.\n        return this.offsetWidth / 8;\n    }\n    _getSquareElement(square) {\n        return this.shadowRoot.getElementById(squareId(square));\n    }\n    _getSparePieceElement(piece) {\n        return this.shadowRoot.getElementById(sparePieceId(piece));\n    }\n    // -------------------------------------------------------------------------\n    // DOM Building\n    // -------------------------------------------------------------------------\n    render() {\n        return html `\n      <div part=\"spare-pieces\">\n        ${this._renderSparePieces(this.orientation === 'white' ? 'black' : 'white')}\n      </div>\n      ${this._renderBoard()}\n      <div part=\"spare-pieces\">\n        ${this._renderSparePieces(this.orientation === 'white' ? 'white' : 'black')}\n      </div>\n      <div\n        id=\"dragged-pieces\"\n        style=${styleMap({\n            width: `${this._squareSize}px`,\n            height: `${this._squareSize}px`,\n        })}\n      >\n        ${this._renderDraggedPiece()}\n      </div>\n    `;\n    }\n    _renderSparePieces(color) {\n        if (!this.sparePieces) {\n            return nothing;\n        }\n        const pieces = color === 'black' ? blackPieces : whitePieces;\n        // The empty <div>s below are placeholders to get the shelf to line up with\n        // the board's grid. Another option would be to try to use the same grid,\n        // either with a single container, or subgrid/display:contents when those\n        // are available.\n        return html `\n      <div></div>\n      ${pieces.map((p) => html `\n            <div\n              id=\"spare-${p}\"\n              @mousedown=${this._mousedownSparePiece}\n              @touchstart=${this._touchstartSparePiece}\n            >\n              ${this._renderPiece(p, {}, false, sparePieceId(p))}\n            </div>\n          `)}\n      <div></div>\n    `;\n    }\n    _renderDraggedPiece() {\n        var _a, _b;\n        const styles = {\n            height: `${this._squareSize}px`,\n            width: `${this._squareSize}px`,\n        };\n        const dragState = this._dragState;\n        if (dragState !== undefined) {\n            styles.display = 'block';\n            if (dragState.state === 'dragging') {\n                const { x, y } = dragState;\n                Object.assign(styles, {\n                    top: `${y - this._squareSize / 2}px`,\n                    left: `${x - this._squareSize / 2}px`,\n                });\n            }\n            else if (dragState.state === 'snapback') {\n                const { source } = dragState;\n                const square = this._getSquareElement(source);\n                const rect = square.getBoundingClientRect();\n                Object.assign(styles, {\n                    transitionProperty: 'top, left',\n                    transitionDuration: `${speedToMS(this.snapbackSpeed)}ms`,\n                    top: `${rect.top}px`,\n                    left: `${rect.left}px`,\n                });\n            }\n            else if (dragState.state === 'trash') {\n                const { x, y } = dragState;\n                Object.assign(styles, {\n                    transitionProperty: 'opacity',\n                    transitionDuration: `${speedToMS(this.trashSpeed)}ms`,\n                    opacity: '0',\n                    top: `${y - this._squareSize / 2}px`,\n                    left: `${x - this._squareSize / 2}px`,\n                });\n            }\n            else if (dragState.state === 'snap') {\n                const targetSquare = this._getSquareElement(dragState.location);\n                const rect = targetSquare.getBoundingClientRect();\n                Object.assign(styles, {\n                    transitionProperty: 'top, left',\n                    transitionDuration: `${speedToMS(this.snapSpeed)}ms`,\n                    top: `${rect.top}px`,\n                    left: `${rect.left}px`,\n                });\n            }\n        }\n        return this._renderPiece((_b = (_a = this._dragState) === null || _a === void 0 ? void 0 : _a.piece, (_b !== null && _b !== void 0 ? _b : '')), styles, false, undefined, 'dragged-piece');\n    }\n    _renderBoard() {\n        var _a, _b;\n        const squares = [];\n        const isFlipped = this.orientation === 'black';\n        for (let row = 0; row < 8; row++) {\n            for (let col = 0; col < 8; col++) {\n                const file = COLUMNS[isFlipped ? 7 - col : col];\n                const rank = isFlipped ? row + 1 : 8 - row;\n                const square = `${file}${rank}`;\n                const squareColor = getSquareColor(square);\n                let piece = this._currentPosition[square];\n                const isDragSource = square === ((_a = this._dragState) === null || _a === void 0 ? void 0 : _a.source);\n                const animation = this._animations.get(square);\n                const highlight = isDragSource || this._highlightedSquares.has(square)\n                    ? 'highlight'\n                    : '';\n                const pieceStyles = this._getAnimationStyles(piece, animation);\n                if (!piece && ((_b = animation) === null || _b === void 0 ? void 0 : _b.type) === 'clear') {\n                    // Preserve the piece until the animation is complete\n                    piece = animation.piece;\n                }\n                squares.push(html `\n          <div\n            class=\"square\"\n            id=${squareId(square)}\n            data-square=${square}\n            part=\"square ${square} ${squareColor} ${highlight}\"\n            @mousedown=${this._mousedownSquare}\n            @mouseenter=${this._mouseenterSquare}\n            @mouseleave=${this._mouseleaveSquare}\n            @touchstart=${this._touchstartSquare}\n          >\n            ${this.showNotation && row === 7\n                    ? html `\n                  <div part=\"notation alpha\">${file}</div>\n                `\n                    : nothing}\n            ${this.showNotation && col === 0\n                    ? html `\n                  <div part=\"notation numeric\">${rank}</div>\n                `\n                    : nothing}\n            ${this._renderPiece(piece, pieceStyles, isDragSource)}\n          </div>\n        `);\n            }\n        }\n        const styles = {\n            width: this._squareSize * 8 + 'px',\n            height: this._squareSize * 8 + 'px',\n        };\n        return html `\n      <div part=\"board\" style=${styleMap(styles)}>${squares}</div>\n    `;\n    }\n    _renderPiece(piece, styles, isDragSource, id, part) {\n        if (piece === undefined) {\n            return nothing;\n        }\n        const style = Object.assign({ opacity: '1', transitionProperty: '', transitionDuration: '0ms' }, styles);\n        if (isDragSource || piece === '') {\n            style.display = 'none';\n        }\n        if (piece === '') {\n            return nothing;\n        }\n        if (!isFunction(this.renderPiece)) {\n            this._error(8272, 'invalid renderPiece.');\n        }\n        return html `\n      <div\n        id=${ifDefined(id)}\n        part=\"piece ${(part !== null && part !== void 0 ? part : '')}\"\n        piece=${piece}\n        style=${styleMap(style)}\n        ...=${renderPieceDirective(piece, this.renderPiece)}\n      ></div>\n    `;\n    }\n    _getAnimationStyles(piece, animation) {\n        if (animation) {\n            if (piece &&\n                (animation.type === 'move-start' ||\n                    (animation.type === 'add-start' && this.draggablePieces))) {\n                // Position the moved piece absolutely at the source\n                const srcSquare = animation.type === 'move-start'\n                    ? this._getSquareElement(animation.source)\n                    : this._getSparePieceElement(piece);\n                const destSquare = animation.type === 'move-start'\n                    ? this._getSquareElement(animation.destination)\n                    : this._getSquareElement(animation.square);\n                const srcSquareRect = srcSquare.getBoundingClientRect();\n                const destSquareRect = destSquare.getBoundingClientRect();\n                return {\n                    position: 'absolute',\n                    left: `${srcSquareRect.left - destSquareRect.left}px`,\n                    top: `${srcSquareRect.top - destSquareRect.top}px`,\n                    width: `${this._squareSize}px`,\n                    height: `${this._squareSize}px`,\n                };\n            }\n            if (piece &&\n                (animation.type === 'move' ||\n                    (animation.type === 'add' && this.draggablePieces))) {\n                // Transition the moved piece to the destination\n                return {\n                    position: 'absolute',\n                    transitionProperty: 'top, left',\n                    transitionDuration: `${speedToMS(this.moveSpeed)}ms`,\n                    top: `0`,\n                    left: `0`,\n                    width: `${this._squareSize}px`,\n                    height: `${this._squareSize}px`,\n                };\n            }\n            if (!piece && animation.type === 'clear') {\n                // Preserve and transition a removed piece to opacity 0\n                piece = animation.piece;\n                return {\n                    transitionProperty: 'opacity',\n                    transitionDuration: `${speedToMS(this.trashSpeed)}ms`,\n                    opacity: '0',\n                };\n            }\n            if (piece && animation.type === 'add-start') {\n                // Initialize an added piece to opacity 0\n                return {\n                    opacity: '0',\n                };\n            }\n            if (piece && animation.type === 'add') {\n                // Transition an added piece to opacity 1\n                return {\n                    transitionProperty: 'opacity',\n                    transitionDuration: `${speedToMS(this.appearSpeed)}ms`,\n                };\n            }\n        }\n        return {};\n    }\n    // -------------------------------------------------------------------------\n    // Event Listeners\n    // -------------------------------------------------------------------------\n    _mousedownSquare(e) {\n        e.preventDefault();\n        // do nothing if we're not draggable. sparePieces implies draggable\n        if (!this.draggablePieces && !this.sparePieces) {\n            return;\n        }\n        // do nothing if there is no piece on this square\n        const squareEl = e.currentTarget;\n        const square = squareEl.getAttribute('data-square');\n        if (square === null) {\n            return;\n        }\n        if (!this._currentPosition.hasOwnProperty(square)) {\n            return;\n        }\n        this._beginDraggingPiece(square, this._currentPosition[square], e.pageX, e.pageY);\n    }\n    _mousedownSparePiece(e) {\n        e.preventDefault();\n        // do nothing if sparePieces is not enabled\n        if (!this.sparePieces) {\n            return;\n        }\n        const sparePieceContainerEl = e.currentTarget;\n        const pieceEl = sparePieceContainerEl.querySelector('[part~=piece]');\n        const piece = pieceEl.getAttribute('piece');\n        this._beginDraggingPiece('spare', piece, e.pageX, e.pageY);\n    }\n    _mouseenterSquare(e) {\n        // do not fire this event if we are dragging a piece\n        // NOTE: this should never happen, but it's a safeguard\n        if (this._dragState !== undefined) {\n            return;\n        }\n        // get the square\n        const square = e.currentTarget.getAttribute('data-square');\n        // NOTE: this should never happen; defensive\n        if (!validSquare(square)) {\n            return;\n        }\n        // get the piece on this square\n        let piece = false;\n        if (this._currentPosition.hasOwnProperty(square)) {\n            piece = this._currentPosition[square];\n        }\n        this.dispatchEvent(new CustomEvent('mouseover-square', {\n            bubbles: true,\n            detail: {\n                square,\n                piece,\n                position: deepCopy(this._currentPosition),\n                orientation: this.orientation,\n            },\n        }));\n    }\n    _mouseleaveSquare(e) {\n        // do not fire this event if we are dragging a piece\n        // NOTE: this should never happen, but it's a safeguard\n        if (this._dragState !== undefined) {\n            return;\n        }\n        // get the square\n        const square = e.currentTarget.getAttribute('data-square');\n        // NOTE: this should never happen; defensive\n        if (!validSquare(square)) {\n            return;\n        }\n        // get the piece on this square\n        let piece = false;\n        if (this._currentPosition.hasOwnProperty(square)) {\n            piece = this._currentPosition[square];\n        }\n        // execute their function\n        this.dispatchEvent(new CustomEvent('mouseout-square', {\n            bubbles: true,\n            detail: {\n                square,\n                piece,\n                position: deepCopy(this._currentPosition),\n                orientation: this.orientation,\n            },\n        }));\n    }\n    _touchstartSquare(e) {\n        // do nothing if we're not draggable. sparePieces implies draggable\n        if (!this.draggablePieces && !this.sparePieces) {\n            return;\n        }\n        // do nothing if there is no piece on this square\n        const squareEl = e.target.closest('[data-square]');\n        const square = squareEl.getAttribute('data-square');\n        if (!validSquare(square)) {\n            return;\n        }\n        if (!this._currentPosition.hasOwnProperty(square)) {\n            return;\n        }\n        e.preventDefault();\n        this._beginDraggingPiece(square, this._currentPosition[square], e.changedTouches[0].pageX, e.changedTouches[0].pageY);\n    }\n    _touchstartSparePiece(e) {\n        // do nothing if sparePieces is not enabled\n        if (!this.sparePieces)\n            return;\n        const pieceEl = e.target.closest('[piece]');\n        const piece = pieceEl.getAttribute('piece');\n        e.preventDefault();\n        this._beginDraggingPiece('spare', piece, e.changedTouches[0].pageX, e.changedTouches[0].pageY);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Sets the position of the board.\n     *\n     * @param useAnimation If `true`, animate to the new position. If `false`,\n     *   show the new position instantly.\n     */\n    setPosition(position, useAnimation = true) {\n        position = normalizePozition(position);\n        // validate position object\n        if (!validPositionObject(position)) {\n            throw this._error(6482, 'Invalid value passed to the position method.', position);\n        }\n        if (useAnimation) {\n            // start the animations\n            const animations = this._calculateAnimations(this._currentPosition, position);\n            this._doAnimations(animations, this._currentPosition, position);\n        }\n        this._setCurrentPosition(position);\n        this.requestUpdate();\n    }\n    /**\n     * Returns the current position as a FEN string.\n     */\n    fen() {\n        return objToFen(this._currentPosition);\n    }\n    /**\n     * Sets the board to the start position.\n     *\n     * @param useAnimation If `true`, animate to the new position. If `false`,\n     *   show the new position instantly.\n     */\n    start(useAnimation) {\n        this.setPosition('start', useAnimation);\n    }\n    /**\n     * Removes all the pieces on the board. If `useAnimation` is `false`, removes\n     * pieces instantly.\n     *\n     * This is shorthand for `setPosition({})`.\n     *\n     * @param useAnimation If `true`, animate to the new position. If `false`,\n     *   show the new position instantly.\n     */\n    clear(useAnimation) {\n        this.setPosition({}, useAnimation);\n    }\n    /**\n     * Executes one or more moves on the board.\n     *\n     * Moves are strings the form of \"e2-e4\", \"f6-d5\", etc., Pass `false` as an\n     * argument to disable animation.\n     */\n    move(...args) {\n        let useAnimation = true;\n        // collect the moves into an object\n        const moves = {};\n        for (const arg of args) {\n            // any \"false\" to this function means no animations\n            if (arg === false) {\n                useAnimation = false;\n                continue;\n            }\n            // skip invalid arguments\n            if (!validMove(arg)) {\n                this._error(2826, 'Invalid move passed to the move method.', arg);\n                continue;\n            }\n            const [from, to] = arg.split('-');\n            moves[from] = to;\n        }\n        // calculate position from moves\n        const newPos = calculatePositionFromMoves(this._currentPosition, moves);\n        // update the board\n        this.setPosition(newPos, useAnimation);\n        // return the new position object\n        return newPos;\n    }\n    /**\n     * Flip the orientation.\n     */\n    flip() {\n        this.orientation = this.orientation === 'white' ? 'black' : 'white';\n    }\n    /**\n     * Recalculates board and square sizes based on the parent element and redraws\n     * the board accordingly.\n     */\n    resize() {\n        this.requestUpdate();\n    }\n    // -------------------------------------------------------------------------\n    // Lifecycle Callbacks\n    // -------------------------------------------------------------------------\n    firstUpdated() {\n        // We need to re-render to read the size of the container\n        this.requestUpdate();\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        window.addEventListener('mousemove', this._mousemoveWindow);\n        window.addEventListener('mouseup', this._mouseupWindow);\n        window.addEventListener('touchmove', this._touchmoveWindow, {\n            passive: false,\n        });\n        window.addEventListener('touchend', this._touchendWindow, { passive: false });\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        window.removeEventListener('mousemove', this._mousemoveWindow);\n        window.removeEventListener('mouseup', this._mouseupWindow);\n        window.removeEventListener('touchmove', this._touchmoveWindow);\n        window.removeEventListener('touchend', this._touchendWindow);\n    }\n    // -------------------------------------------------------------------------\n    // Control Flow\n    // -------------------------------------------------------------------------\n    _setCurrentPosition(position) {\n        const oldPos = deepCopy(this._currentPosition);\n        const newPos = deepCopy(position);\n        const oldFen = objToFen(oldPos);\n        const newFen = objToFen(newPos);\n        // do nothing if no change in position\n        if (oldFen === newFen)\n            return;\n        // Fire change event\n        this.dispatchEvent(new CustomEvent('change', {\n            bubbles: true,\n            detail: {\n                value: newPos,\n                oldValue: oldPos,\n            },\n        }));\n        // update state\n        this._currentPosition = position;\n    }\n    _isXYOnSquare(x, y) {\n        // TODO: test that this works with the polyfill\n        const elements = this.shadowRoot.elementsFromPoint(x, y);\n        const squareEl = elements.find((e) => e.classList.contains('square'));\n        const square = squareEl === undefined\n            ? 'offboard'\n            : squareEl.getAttribute('data-square');\n        return square;\n    }\n    _highlightSquare(square, value = true) {\n        if (value) {\n            this._highlightedSquares.add(square);\n        }\n        else {\n            this._highlightedSquares.delete(square);\n        }\n        this.requestUpdate('_highlightedSquares');\n    }\n    async _snapbackDraggedPiece() {\n        assertIsDragging(this._dragState);\n        const { source, piece } = this._dragState;\n        // there is no \"snapback\" for spare pieces\n        if (source === 'spare') {\n            return this._trashDraggedPiece();\n        }\n        this._dragState = {\n            state: 'snapback',\n            piece,\n            source,\n        };\n        // Wait for a paint\n        this.requestUpdate();\n        await new Promise((resolve) => setTimeout(resolve, 0));\n        return new Promise((resolve) => {\n            const transitionComplete = () => {\n                this._draggedPieceElement.removeEventListener('transitionend', transitionComplete);\n                resolve();\n                this.dispatchEvent(new CustomEvent('snapback-end', {\n                    bubbles: true,\n                    detail: {\n                        piece: piece,\n                        square: source,\n                        position: deepCopy(this._currentPosition),\n                        orientation: this.orientation,\n                    },\n                }));\n            };\n            this._draggedPieceElement.addEventListener('transitionend', transitionComplete);\n        });\n    }\n    async _trashDraggedPiece() {\n        assertIsDragging(this._dragState);\n        const { source, piece } = this._dragState;\n        // remove the source piece\n        const newPosition = deepCopy(this._currentPosition);\n        delete newPosition[source];\n        this._setCurrentPosition(newPosition);\n        this._dragState = {\n            state: 'trash',\n            piece,\n            x: this._dragState.x,\n            y: this._dragState.y,\n            source: this._dragState.source,\n        };\n        // Wait for a paint\n        this.requestUpdate();\n        await new Promise((resolve) => setTimeout(resolve, 0));\n        return new Promise((resolve) => {\n            const transitionComplete = () => {\n                this._draggedPieceElement.removeEventListener('transitionend', transitionComplete);\n                resolve();\n            };\n            this._draggedPieceElement.addEventListener('transitionend', transitionComplete);\n        });\n    }\n    async _dropDraggedPieceOnSquare(square) {\n        assertIsDragging(this._dragState);\n        const { source, piece } = this._dragState;\n        // update position\n        const newPosition = deepCopy(this._currentPosition);\n        delete newPosition[source];\n        newPosition[square] = piece;\n        this._setCurrentPosition(newPosition);\n        this._dragState = {\n            state: 'snap',\n            piece,\n            location: square,\n            source: square,\n        };\n        // Wait for a paint\n        this.requestUpdate();\n        await new Promise((resolve) => setTimeout(resolve, 0));\n        return new Promise((resolve) => {\n            const transitionComplete = () => {\n                this._draggedPieceElement.removeEventListener('transitionend', transitionComplete);\n                resolve();\n                // Fire the snap-end event\n                this.dispatchEvent(new CustomEvent('snap-end', {\n                    bubbles: true,\n                    detail: {\n                        source,\n                        square,\n                        piece,\n                    },\n                }));\n            };\n            this._draggedPieceElement.addEventListener('transitionend', transitionComplete);\n        });\n    }\n    _beginDraggingPiece(source, piece, x, y) {\n        // Fire cancalable drag-start event\n        const event = new CustomEvent('drag-start', {\n            bubbles: true,\n            cancelable: true,\n            detail: {\n                source,\n                piece,\n                position: deepCopy(this._currentPosition),\n                orientation: this.orientation,\n            },\n        });\n        this.dispatchEvent(event);\n        if (event.defaultPrevented) {\n            return;\n        }\n        // set state\n        this._dragState = {\n            state: 'dragging',\n            x,\n            y,\n            piece,\n            // if the piece came from spare pieces, location is offboard\n            location: source === 'spare' ? 'offboard' : source,\n            source,\n        };\n        this.requestUpdate();\n    }\n    _updateDraggedPiece(clientX, clientY, pageX, pageY) {\n        assertIsDragging(this._dragState);\n        // put the dragged piece over the mouse cursor\n        this._dragState.x = pageX;\n        this._dragState.y = pageY;\n        this.requestUpdate();\n        const location = this._isXYOnSquare(clientX, clientY);\n        // do nothing more if the location has not changed\n        if (location === this._dragState.location) {\n            return;\n        }\n        // remove highlight from previous square\n        if (validSquare(this._dragState.location)) {\n            this._highlightSquare(this._dragState.location, false);\n        }\n        // add highlight to new square\n        if (validSquare(location)) {\n            this._highlightSquare(location);\n        }\n        this.dispatchEvent(new CustomEvent('drag-move', {\n            bubbles: true,\n            detail: {\n                newLocation: location,\n                oldLocation: this._dragState.location,\n                source: this._dragState.source,\n                piece: this._dragState.piece,\n                position: deepCopy(this._currentPosition),\n                orientation: this.orientation,\n            },\n        }));\n        // update state\n        this._dragState.location = location;\n    }\n    async _stopDraggedPiece(location) {\n        assertIsDragging(this._dragState);\n        const { source, piece } = this._dragState;\n        // determine what the action should be\n        let action = 'drop';\n        if (location === 'offboard') {\n            action = this.dropOffBoard === 'trash' ? 'trash' : 'snapback';\n        }\n        const newPosition = deepCopy(this._currentPosition);\n        const oldPosition = deepCopy(this._currentPosition);\n        // source piece is a spare piece and position is on the board\n        if (source === 'spare' && validSquare(location)) {\n            // add the piece to the board\n            newPosition[location] = piece;\n        }\n        // source piece was on the board\n        if (validSquare(source)) {\n            // remove the piece from the board\n            delete newPosition[source];\n            // new position is on the board\n            if (validSquare(location)) {\n                // move the piece\n                newPosition[location] = piece;\n            }\n        }\n        // Fire the drop event\n        // Listeners can potentially change the drop action\n        const dropEvent = new CustomEvent('drop', {\n            bubbles: true,\n            detail: {\n                source,\n                target: location,\n                piece,\n                newPosition,\n                oldPosition,\n                orientation: this.orientation,\n                setAction(a) {\n                    action = a;\n                },\n            },\n        });\n        this.dispatchEvent(dropEvent);\n        this._highlightedSquares.clear();\n        // do it!\n        if (action === 'snapback') {\n            await this._snapbackDraggedPiece();\n        }\n        else if (action === 'trash') {\n            await this._trashDraggedPiece();\n        }\n        else if (action === 'drop') {\n            await this._dropDraggedPieceOnSquare(location);\n        }\n        // clear state\n        this._dragState = undefined;\n        // Render the final non-dragging state\n        this.requestUpdate();\n    }\n    // -------------------------------------------------------------------------\n    // Animations\n    // -------------------------------------------------------------------------\n    // calculate an array of animations that need to happen in order to get\n    // from pos1 to pos2\n    _calculateAnimations(pos1, pos2) {\n        // make copies of both\n        pos1 = deepCopy(pos1);\n        pos2 = deepCopy(pos2);\n        const animations = [];\n        const squaresMovedTo = {};\n        // remove pieces that are the same in both positions\n        for (const i in pos2) {\n            if (!pos2.hasOwnProperty(i))\n                continue;\n            if (pos1.hasOwnProperty(i) && pos1[i] === pos2[i]) {\n                delete pos1[i];\n                delete pos2[i];\n            }\n        }\n        // find all the \"move\" animations\n        for (const i in pos2) {\n            if (!pos2.hasOwnProperty(i))\n                continue;\n            const closestPiece = findClosestPiece(pos1, pos2[i], i);\n            if (closestPiece) {\n                animations.push({\n                    type: 'move',\n                    source: closestPiece,\n                    destination: i,\n                    piece: pos2[i],\n                });\n                delete pos1[closestPiece];\n                delete pos2[i];\n                squaresMovedTo[i] = true;\n            }\n        }\n        // \"add\" animations\n        for (const i in pos2) {\n            if (!pos2.hasOwnProperty(i)) {\n                continue;\n            }\n            animations.push({\n                type: 'add',\n                square: i,\n                piece: pos2[i],\n            });\n            delete pos2[i];\n        }\n        // \"clear\" animations\n        for (const i in pos1) {\n            if (!pos1.hasOwnProperty(i))\n                continue;\n            // do not clear a piece if it is on a square that is the result\n            // of a \"move\", ie: a piece capture\n            if (squaresMovedTo.hasOwnProperty(i))\n                continue;\n            animations.push({\n                type: 'clear',\n                square: i,\n                piece: pos1[i],\n            });\n            delete pos1[i];\n        }\n        return animations;\n    }\n    // execute an array of animations\n    async _doAnimations(animations, oldPos, newPos) {\n        if (animations.length === 0) {\n            return;\n        }\n        let numFinished = 0;\n        const transitionEndListener = () => {\n            numFinished++;\n            if (numFinished === animations.length) {\n                this.shadowRoot.removeEventListener('transitionend', transitionEndListener);\n                this._animations.clear();\n                this.requestUpdate();\n                this.dispatchEvent(new CustomEvent('move-end', {\n                    bubbles: true,\n                    detail: {\n                        oldPosition: deepCopy(oldPos),\n                        newPosition: deepCopy(newPos),\n                    },\n                }));\n            }\n        };\n        this.shadowRoot.addEventListener('transitionend', transitionEndListener);\n        // Render once with added pieces at opacity 0\n        this._animations.clear();\n        for (const animation of animations) {\n            if (animation.type === 'add' || animation.type === 'add-start') {\n                this._animations.set(animation.square, Object.assign(Object.assign({}, animation), { type: 'add-start' }));\n            }\n            else if (animation.type === 'move' || animation.type === 'move-start') {\n                this._animations.set(animation.destination, Object.assign(Object.assign({}, animation), { type: 'move-start' }));\n            }\n            else {\n                this._animations.set(animation.square, animation);\n            }\n        }\n        // Wait for a paint\n        this.requestUpdate();\n        await new Promise((resolve) => setTimeout(resolve, 0));\n        // Render again with the piece at opacity 1 with a transition\n        this._animations.clear();\n        for (const animation of animations) {\n            if (animation.type === 'move' || animation.type === 'move-start') {\n                this._animations.set(animation.destination, animation);\n            }\n            else {\n                this._animations.set(animation.square, animation);\n            }\n        }\n        this.requestUpdate();\n    }\n    // -------------------------------------------------------------------------\n    // Validation / Errors\n    // -------------------------------------------------------------------------\n    _error(code, msg, _obj) {\n        const errorText = `Chessboard Error ${code} : ${msg}`;\n        this.dispatchEvent(new ErrorEvent('error', {\n            message: errorText,\n        }));\n        return new Error(errorText);\n    }\n};\nChessBoardElement.styles = styles;\n__decorate([\n    property({\n        converter: (value) => normalizePozition(value),\n    })\n], ChessBoardElement.prototype, \"position\", null);\n__decorate([\n    property({\n        attribute: 'hide-notation',\n        type: Boolean,\n    })\n], ChessBoardElement.prototype, \"hideNotation\", void 0);\n__decorate([\n    property()\n], ChessBoardElement.prototype, \"orientation\", void 0);\n__decorate([\n    property({\n        attribute: 'draggable-pieces',\n        type: Boolean,\n    })\n], ChessBoardElement.prototype, \"draggablePieces\", void 0);\n__decorate([\n    property({ attribute: 'drop-off-board' })\n], ChessBoardElement.prototype, \"dropOffBoard\", void 0);\n__decorate([\n    property({ attribute: 'piece-theme' })\n], ChessBoardElement.prototype, \"pieceTheme\", void 0);\n__decorate([\n    property({ attribute: false })\n], ChessBoardElement.prototype, \"renderPiece\", void 0);\n__decorate([\n    property({\n        attribute: 'move-speed',\n    })\n], ChessBoardElement.prototype, \"moveSpeed\", void 0);\n__decorate([\n    property({\n        attribute: 'snapback-speed',\n    })\n], ChessBoardElement.prototype, \"snapbackSpeed\", void 0);\n__decorate([\n    property({\n        attribute: 'snap-speed',\n    })\n], ChessBoardElement.prototype, \"snapSpeed\", void 0);\n__decorate([\n    property({\n        attribute: 'trash-speed',\n    })\n], ChessBoardElement.prototype, \"trashSpeed\", void 0);\n__decorate([\n    property({\n        attribute: 'appear-speed',\n    })\n], ChessBoardElement.prototype, \"appearSpeed\", void 0);\n__decorate([\n    property({\n        attribute: 'spare-pieces',\n        type: Boolean,\n    })\n], ChessBoardElement.prototype, \"sparePieces\", void 0);\n__decorate([\n    query('[part~=\"dragged-piece\"]')\n], ChessBoardElement.prototype, \"_draggedPieceElement\", void 0);\nChessBoardElement = __decorate([\n    customElement('chess-board')\n], ChessBoardElement);\nexport { ChessBoardElement };\n//# sourceMappingURL=chessboard-element.js.map"]},"metadata":{},"sourceType":"module"}