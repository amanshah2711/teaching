{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive } from '../lit-html.js';\nconst previousValues = new WeakMap();\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\n\nexport const ifDefined = directive(value => part => {\n  const previousValue = previousValues.get(part);\n\n  if (value === undefined && part instanceof AttributePart) {\n    // If the value is undefined, remove the attribute, but only if the value\n    // was previously defined.\n    if (previousValue !== undefined || !previousValues.has(part)) {\n      const name = part.committer.name;\n      part.committer.element.removeAttribute(name);\n    }\n  } else if (value !== previousValue) {\n    part.setValue(value);\n  }\n\n  previousValues.set(part, value);\n});","map":{"version":3,"sources":["../src/directives/if-defined.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAcA,SAAQ,aAAR,EAAuB,SAAvB,QAA6C,gBAA7C;AAEA,MAAM,cAAc,GAAG,IAAI,OAAJ,EAAvB;AAEA;;;;;;;AAMA,OAAO,MAAM,SAAS,GAAG,SAAS,CAAE,KAAD,IAAqB,IAAD,IAAe;AACpE,QAAM,aAAa,GAAG,cAAc,CAAC,GAAf,CAAmB,IAAnB,CAAtB;;AAEA,MAAI,KAAK,KAAK,SAAV,IAAuB,IAAI,YAAY,aAA3C,EAA0D;AACxD;AACA;AACA,QAAI,aAAa,KAAK,SAAlB,IAA+B,CAAC,cAAc,CAAC,GAAf,CAAmB,IAAnB,CAApC,EAA8D;AAC5D,YAAM,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,IAA5B;AACA,MAAA,IAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,eAAvB,CAAuC,IAAvC;AACD;AACF,GAPD,MAOO,IAAI,KAAK,KAAK,aAAd,EAA6B;AAClC,IAAA,IAAI,CAAC,QAAL,CAAc,KAAd;AACD;;AAED,EAAA,cAAc,CAAC,GAAf,CAAmB,IAAnB,EAAyB,KAAzB;AACD,CAfiC,CAA3B","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part} from '../lit-html.js';\n\nconst previousValues = new WeakMap<Part, unknown>();\n\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = directive((value: unknown) => (part: Part) => {\n  const previousValue = previousValues.get(part);\n\n  if (value === undefined && part instanceof AttributePart) {\n    // If the value is undefined, remove the attribute, but only if the value\n    // was previously defined.\n    if (previousValue !== undefined || !previousValues.has(part)) {\n      const name = part.committer.name;\n      part.committer.element.removeAttribute(name);\n    }\n  } else if (value !== previousValue) {\n    part.setValue(value);\n  }\n\n  previousValues.set(part, value);\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}